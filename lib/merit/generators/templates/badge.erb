### QALAM_MERIT ###
class Merit::Badge < ActiveRecord::Base
  # include Workflow
  # include Context
  self.table_name = "merit_badges"
  @valid_images = ["image/jpeg", "image/png", "image/bmp", "image/jpg"]

  before_validation :strip_whitespace
  def strip_whitespace
    self.name = self.name.strip unless self.name.nil?
    self.description = self.description.strip unless self.description.nil?
  end

  validates :name, presence: true, length: { minimum: 1, maximum: 20 }
  validates :points, presence: true, numericality: true, :inclusion => 1..100
  validates :description, presence: true, length: { minimum: 3, maximum: 100 }

  has_one :image, :class_name => 'Attachment', :as => :context, :inverse_of => :context, :dependent => :destroy
  belongs_to :created_by, foreign_key: "user_id", class_name: 'User'

  def image_url
    if self.image
      return self.image.public_url
    else
      return '/images/apple-touch-icon.png' 
    end
  end

  def self.valid_images
    @valid_images
  end

  def badges_sashes
    Merit::BadgesSash.where(badge_id: self.id)
  end

  class << self
    def find_by_id(ids)
      ids = Array.wrap(ids)
      find { |b| ids.include? b[:id] }
    end

    def by_name(name)
      find { |b| b.name.to_s == name.to_s }
    end

    def by_level(level)
      find { |b| b.level.to_s == level.to_s }
    end

    def find_by_name_and_level(name, level)
      badge = Merit::Badge.by_name(name)
      badge = badge.by_level(level) unless level.nil?
      if badge.nil?
        str = "No badge '#{name}' found. Define it in initializers/merit.rb"
        fail ::Merit::BadgeNotFound, str
      end
      badge
    end

    def _define_related_entries_method(meritable_class_name)
      define_method(:"#{meritable_class_name.underscore.pluralize}") do
        sashes = Merit::QalamBadgeSash.where(badge_id: id).pluck(:sash_id)
        meritable_class_name.constantize.where(sash_id: sashes)
      end
    end

    def create_with_attachment(account, badge, attachment)
      if ((attachment.nil? || attachment.to_s == "null") || account.nil? || badge.nil?)
        badge.errors.add(:image, :image_required, message: 'Image Required')
        badge.destroy if badge.id
        return false
      end
      
      if attachment.content_type && @valid_images.include?(attachment.content_type)
        account.shard.activate do
          att = Attachment.create_data_attachment(badge, attachment)
          badge.image = att
          badge.save!
          badge
        end
        return true
      else
        badge.errors.add(:image, :invalid_format, message: 'invalid image format')
        badge.destroy if badge.id
        return false
      end
    end
  end
end
